{"ast":null,"code":"import axios from 'axios';\n// Create axios instance with base configuration\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:8082/api/v1',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for adding auth token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response4, _error$response5, _error$response5$data, _error$config2;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized access\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n  }\n\n  // Handle network errors and server errors\n  if (!error.response) {\n    var _error$config;\n    const networkError = {\n      timestamp: new Date().toISOString(),\n      status: 0,\n      error: 'Network Error',\n      message: 'Sorry for the inconvenience. Internal server error. Try after sometime!',\n      path: ((_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url) || ''\n    };\n    return Promise.reject(networkError);\n  }\n  const apiError = {\n    timestamp: new Date().toISOString(),\n    status: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) || 500,\n    error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Unknown Error',\n    message: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) >= 500 ? 'Sorry for the inconvenience. Internal server error. Try after sometime!' : ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'An unexpected error occurred',\n    path: ((_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.url) || ''\n  };\n  return Promise.reject(apiError);\n});\n\n// Project API\nexport const projectApi = {\n  getAllProjects: async params => {\n    const response = await apiClient.get('/projects', {\n      params\n    });\n    return response.data;\n  },\n  getProjectByCode: async code => {\n    const response = await apiClient.get(`/projects/${code}`);\n    return response.data;\n  },\n  createProject: async projectData => {\n    const response = await apiClient.post('/projects', projectData);\n    return response.data;\n  },\n  updateProject: async (id, projectData) => {\n    const response = await apiClient.put(`/projects/${id}`, projectData);\n    return response.data;\n  },\n  deleteProject: async id => {\n    const response = await apiClient.delete(`/projects/${id}`);\n    return response.data;\n  }\n};\n\n// Service API\nexport const serviceApi = {\n  getAllServices: async params => {\n    const response = await apiClient.get('/services', {\n      params\n    });\n    return response.data;\n  },\n  getServiceByName: async name => {\n    const response = await apiClient.get(`/services/${encodeURIComponent(name)}`);\n    return response.data;\n  },\n  createService: async serviceData => {\n    const response = await apiClient.post('/services', serviceData);\n    return response.data;\n  },\n  updateService: async (id, serviceData) => {\n    const response = await apiClient.put(`/services/${id}`, serviceData);\n    return response.data;\n  },\n  deleteService: async id => {\n    const response = await apiClient.delete(`/services/${id}`);\n    return response.data;\n  }\n};\n\n// Enquiry API\nexport const enquiryApi = {\n  createEnquiry: async enquiryData => {\n    const response = await apiClient.post('/enquiries', enquiryData);\n    return response.data;\n  },\n  getAllEnquiries: async params => {\n    const response = await apiClient.get('/enquiries', {\n      params\n    });\n    return response.data;\n  },\n  updateEnquiry: async (id, enquiryData) => {\n    const response = await apiClient.put(`/enquiries/${id}`, enquiryData);\n    return response.data;\n  }\n};\n\n// User API\nexport const userApi = {\n  getAllUsers: async () => {\n    const response = await apiClient.get('/users');\n    return response.data;\n  },\n  getUserById: async userId => {\n    const response = await apiClient.get(`/users/${userId}`);\n    return response.data;\n  },\n  createUser: async userData => {\n    const response = await apiClient.post('/users', null, {\n      params: userData\n    });\n    return response.data;\n  },\n  updateUser: async (userId, userData) => {\n    const response = await apiClient.put(`/users/${userId}`, null, {\n      params: userData\n    });\n    return response.data;\n  },\n  deleteUser: async userId => {\n    const response = await apiClient.delete(`/users/${userId}`);\n    return response.data;\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response5","_error$response5$data","_error$config2","status","removeItem","window","location","href","_error$config","networkError","timestamp","Date","toISOString","message","path","url","apiError","data","projectApi","getAllProjects","params","get","getProjectByCode","code","createProject","projectData","post","updateProject","id","put","deleteProject","delete","serviceApi","getAllServices","getServiceByName","name","encodeURIComponent","createService","serviceData","updateService","deleteService","enquiryApi","createEnquiry","enquiryData","getAllEnquiries","updateEnquiry","userApi","getAllUsers","getUserById","userId","createUser","userData","updateUser","deleteUser"],"sources":["/Users/navinkc/Desktop/Arcadia/Navin/jv/jvconstructions/jvconstructions-ui/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport { \n  Project, \n  ProjectResponse, \n  Service, \n  ServiceResponse, \n  Enquiry, \n  CreateEnquiryRequest,\n  ApiError \n} from '../types';\n\n// Create axios instance with base configuration\nconst apiClient: AxiosInstance = axios.create({\n  baseURL: 'http://localhost:8082/api/v1',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for adding auth token\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized access\n      localStorage.removeItem('authToken');\n      window.location.href = '/login';\n    }\n    \n    // Handle network errors and server errors\n    if (!error.response) {\n      const networkError: ApiError = {\n        timestamp: new Date().toISOString(),\n        status: 0,\n        error: 'Network Error',\n        message: 'Sorry for the inconvenience. Internal server error. Try after sometime!',\n        path: error.config?.url || '',\n      };\n      return Promise.reject(networkError);\n    }\n    \n    const apiError: ApiError = {\n      timestamp: new Date().toISOString(),\n      status: error.response?.status || 500,\n      error: error.response?.data?.error || 'Unknown Error',\n      message: error.response?.status >= 500 \n        ? 'Sorry for the inconvenience. Internal server error. Try after sometime!'\n        : error.response?.data?.message || 'An unexpected error occurred',\n      path: error.config?.url || '',\n    };\n    \n    return Promise.reject(apiError);\n  }\n);\n\n// Project API\nexport const projectApi = {\n  getAllProjects: async (params?: {\n    projectStatus?: string;\n    city?: string;\n    page?: number;\n    size?: number;\n    sort?: string;\n  }): Promise<ProjectResponse> => {\n    const response = await apiClient.get<ProjectResponse>('/projects', { params });\n    return response.data;\n  },\n\n  getProjectByCode: async (code: string): Promise<Project> => {\n    const response = await apiClient.get<Project>(`/projects/${code}`);\n    return response.data;\n  },\n\n  createProject: async (projectData: Partial<Project>): Promise<Project> => {\n    const response = await apiClient.post<Project>('/projects', projectData);\n    return response.data;\n  },\n\n  updateProject: async (id: number, projectData: Partial<Project>): Promise<Project> => {\n    const response = await apiClient.put<Project>(`/projects/${id}`, projectData);\n    return response.data;\n  },\n\n  deleteProject: async (id: number): Promise<string> => {\n    const response = await apiClient.delete<string>(`/projects/${id}`);\n    return response.data;\n  },\n};\n\n// Service API\nexport const serviceApi = {\n  getAllServices: async (params?: {\n    page?: number;\n    size?: number;\n    sort?: string;\n  }): Promise<ServiceResponse> => {\n    const response = await apiClient.get<ServiceResponse>('/services', { params });\n    return response.data;\n  },\n\n  getServiceByName: async (name: string): Promise<Service> => {\n    const response = await apiClient.get<Service>(`/services/${encodeURIComponent(name)}`);\n    return response.data;\n  },\n\n  createService: async (serviceData: { name: string; description: string }): Promise<Service> => {\n    const response = await apiClient.post<Service>('/services', serviceData);\n    return response.data;\n  },\n\n  updateService: async (id: number, serviceData: { name: string; description: string }): Promise<Service> => {\n    const response = await apiClient.put<Service>(`/services/${id}`, serviceData);\n    return response.data;\n  },\n\n  deleteService: async (id: number): Promise<string> => {\n    const response = await apiClient.delete<string>(`/services/${id}`);\n    return response.data;\n  },\n};\n\n// Enquiry API\nexport const enquiryApi = {\n  createEnquiry: async (enquiryData: CreateEnquiryRequest): Promise<Enquiry> => {\n    const response = await apiClient.post<Enquiry>('/enquiries', enquiryData);\n    return response.data;\n  },\n\n  getAllEnquiries: async (params?: {\n    status?: string;\n    page?: number;\n    size?: number;\n    sort?: string;\n  }): Promise<{ content: Enquiry[]; totalElements: number }> => {\n    const response = await apiClient.get<{ content: Enquiry[]; totalElements: number }>('/enquiries', { params });\n    return response.data;\n  },\n\n  updateEnquiry: async (id: number, enquiryData: { status?: string; assignedTo?: string }): Promise<Enquiry> => {\n    const response = await apiClient.put<Enquiry>(`/enquiries/${id}`, enquiryData);\n    return response.data;\n  },\n};\n\n// User API\nexport const userApi = {\n  getAllUsers: async (): Promise<any[]> => {\n    const response = await apiClient.get<any[]>('/users');\n    return response.data;\n  },\n\n  getUserById: async (userId: string): Promise<any> => {\n    const response = await apiClient.get<any>(`/users/${userId}`);\n    return response.data;\n  },\n\n  createUser: async (userData: {\n    userName: string;\n    email: string;\n    password: string;\n    role: string;\n  }): Promise<string> => {\n    const response = await apiClient.post<string>('/users', null, { params: userData });\n    return response.data;\n  },\n\n  updateUser: async (userId: string, userData: { email: string }): Promise<string> => {\n    const response = await apiClient.put<string>(`/users/${userId}`, null, { params: userData });\n    return response.data;\n  },\n\n  deleteUser: async (userId: string): Promise<string> => {\n    const response = await apiClient.delete<string>(`/users/${userId}`);\n    return response.data;\n  },\n};\n\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}